name: Package

on:
  push:
    branches: [ setup-github-actions ]
  pull_request:
    branches: [ master ]

jobs:
  package:
    runs-on: windows-latest

    env:
      Solution_Name: DayZServerMonitor.sln
      Test_Project_Path: TestDayZServerMonitorCore\TestDayZServerMonitorCore.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Update Version
      run: |
        $projectFile = "$PWD\DayZServerMonitor.csproj"
        [xml]$projectXML = Get-Content($projectFile)
        $projectXML.Project.ChildNodes.Item(1).ApplicationRevision = "$env:GITHUB_RUN_NUMBER"
        $newVersion = [string]::Join(".", $projectXML.Project.ChildNodes.Item(1).ApplicationVersion.Split("."), 0, 3) + ".$env:GITHUB_RUN_NUMBER"
        $projectXML.Project.ChildNodes.Item(1).ApplicationVersion = "$newVersion"
        $projectXML.Save($projectFile)

        $regex = new-object System.Text.RegularExpressions.Regex('(Assembly(File)?Version)\(\"([0-9.]*)\"\)', [System.Text.RegularExpressions.RegexOptions]::MultiLine)
        $assemblyFile = "$PWD\Properties\AssemblyInfo.cs"
        $assemblyContent = [IO.File]::ReadAllText($assemblyFile)
        $assemblyContent = $regex.Replace($assemblyContent, '${1}("' + $newVersion + '")')
        [IO.File]::WriteAllText($assemblyFile, $assemblyContent)

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Execute unit tests
      run: dotnet test

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=Release

    - name: Build the application
      run: msbuild $env:Solution_Name /t:Publish /p:Configuration=Release /m /verbosity:minimal

#    # Decode the base 64 encoded pfx and save the Signing_Certificate
#    - name: Decode the pfx
#      run: |
#        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
#        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
#        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
#
#    # Create the app package by building and packaging the Windows Application Packaging project
#    - name: Create the app package
#      run: msbuild $env:Wap_Project_Path /p:Configuration=Release /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
#      env:
#        Appx_Bundle: Always
#        Appx_Bundle_Platforms: x86|x64
#        Appx_Package_Build_Mode: StoreUpload
#
#    # Remove the pfx
#    - name: Remove the pfx
#      run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    - name: Create "portable build" zip archive
      run: |
        Compress-Archive -Path ".\bin\Release\DayZServerMonitor.exe", ".\bin\Release\DayZServerMonitorCore.dll" -DestinationPath "dayz-server-monitor-portable.zip"

    - name: Create installer zip archive
      run: |
        Remove-Item ".\bin\Release\app.publish\DayZServerMonitor.exe"
        Compress-Archive -Path ".\bin\Release\app.publish\*" -DestinationPath "dayz-server-monitor-installer.zip"

    - name: Upload portable build
      uses: actions/upload-artifact@v2
      with:
        name: Portable Build
        path: dayz-server-monitor-portable.zip

    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        name: Installer
        path: dayz-server-monitor-installer.zip
